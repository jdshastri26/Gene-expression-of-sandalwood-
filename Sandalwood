pip install rpy2 pandas matplotlib seaborn argparse

# file path: gene_expression_analysis_cli.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import argparse
import logging
from rpy2.robjects import pandas2ri, r
from rpy2.robjects.packages import importr
import os

# Activate automatic conversion between R and pandas data structures
pandas2ri.activate()

# Import DESeq2 from R
deseq2 = importr('DESeq2')

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_data(counts_path, metadata_path):
    """
    Load gene expression count data and sample metadata.
    """
    logging.info("Loading data...")
    count_data = pd.read_csv(counts_path, index_col=0)
    col_data = pd.read_csv(metadata_path, index_col=0)
    logging.info("Data loaded successfully.")
    return count_data, col_data

def run_deseq2_analysis(count_data, col_data):
    """
    Perform differential gene expression analysis using DESeq2.
    """
    logging.info("Running DESeq2 analysis...")
    count_data_r = pandas2ri.py2rpy(count_data)
    col_data_r = pandas2ri.py2rpy(col_data)

    dds = deseq2.DESeqDataSetFromMatrix(countData=count_data_r, colData=col_data_r, design=r('~ condition'))
    dds = deseq2.DESeq(dds)
    res = deseq2.results(dds)
    res_df = pandas2ri.rpy2py(res)
    logging.info("DESeq2 analysis completed.")
    
    return res_df

def plot_volcano(res_df, pval_threshold, lfc_threshold, output_dir):
    """
    Plot a volcano plot for the differential expression results.
    """
    logging.info("Generating volcano plot...")
    res_df['-log10(pvalue)'] = -np.log10(res_df['pvalue'])
    res_df['significant'] = (res_df['padj'] < pval_threshold) & (abs(res_df['log2FoldChange']) > lfc_threshold)

    plt.figure(figsize=(10, 8))
    sns.scatterplot(data=res_df, x='log2FoldChange', y='-log10(pvalue)', hue='significant', palette={True: 'red', False: 'black'})
    plt.axhline(y=-np.log10(pval_threshold), color='blue', linestyle='--')
    plt.axvline(x=lfc_threshold, color='green', linestyle='--')
    plt.axvline(x=-lfc_threshold, color='green', linestyle='--')
    plt.xlabel('Log2 Fold Change')
    plt.ylabel('-log10(p-value)')
    plt.title('Volcano Plot of Differential Gene Expression')
    plt.savefig(os.path.join(output_dir, 'volcano_plot.png'))
    plt.show()
    logging.info("Volcano plot saved as 'volcano_plot.png'.")

def plot_heatmap(count_data, selected_genes, col_data, output_dir):
    """
    Plot a heatmap of selected genes across samples.
    """
    logging.info("Generating heatmap...")
    heatmap_data = count_data.loc[selected_genes].T
    sns.clustermap(heatmap_data, row_cluster=True, col_cluster=True, standard_scale=1, cmap='vlag')
    plt.title('Heatmap of Selected Genes')
    plt.savefig(os.path.join(output_dir, 'heatmap.png'))
    plt.show()
    logging.info("Heatmap saved as 'heatmap.png'.")

def generate_summary_report(res_df, output_dir):
    """
    Generate a summary report of the DESeq2 analysis.
    """
    logging.info("Generating summary report...")
    summary = {
        "Total genes analyzed": len(res_df),
        "Significant genes (padj < 0.05)": (res_df['padj'] < 0.05).sum(),
        "Upregulated genes (log2FoldChange > 1)": (res_df['log2FoldChange'] > 1).sum(),
        "Downregulated genes (log2FoldChange < -1)": (res_df['log2FoldChange'] < -1).sum()
    }

    with open(os.path.join(output_dir, 'summary_report.txt'), 'w') as report_file:
        for key, value in summary.items():
            report_file.write(f"{key}: {value}\n")
    
    logging.info("Summary report generated.")

def main(counts_path, metadata_path, output_dir, pval_threshold=0.05, lfc_threshold=1.0, top_genes=20):
    """
    Main function to run the gene expression analysis pipeline.
    """
    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Load data
    count_data, col_data = load_data(counts_path, metadata_path)
    
    # Run DESeq2 analysis
    res_df = run_deseq2_analysis(count_data, col_data)
    
    # Save results
    res_df.to_csv(os.path.join(output_dir, 'deseq2_results.csv'))
    logging.info("Results saved as 'deseq2_results.csv'.")
    
    # Plot Volcano plot
    plot_volcano(res_df, pval_threshold, lfc_threshold, output_dir)
    
    # Plot heatmap of top differentially expressed genes
    top_genes_list = res_df.sort_values('padj').head(top_genes).index.tolist()
    plot_heatmap(count_data, top_genes_list, col_data, output_dir)
    
    # Generate summary report
    generate_summary_report(res_df, output_dir)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Differential Gene Expression Analysis for Sandalwood")
    parser.add_argument("counts_path", help="Path to the gene expression counts CSV file")
    parser.add_argument("metadata_path", help="Path to the sample metadata CSV file")
    parser.add_argument("--output_dir", default="output", help="Directory to save the results and plots")
    parser.add_argument("--pval_threshold", type=float, default=0.05, help="P-value threshold for significance (default: 0.05)")
    parser.add_argument("--lfc_threshold", type=float, default=1.0, help="Log2 fold change threshold for significance (default: 1.0)")
    parser.add_argument("--top_genes", type=int, default=20, help="Number of top genes to include in the heatmap (default: 20)")

    args = parser.parse_args()
    main(args.counts_path, args.metadata_path, args.output_dir, args.pval_threshold, args.lfc_threshold, args.top_genes)







